name: Build artifact

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - '.github/workflows/build-artifact.yml'
      - 'AddonExample/**'
      - 'HtmlRenderer/**'
      - 'Overlay*/**'
      - 'tools/fetch_deps.py'
      - 'DEPS.py'
      - 'OverlayPlugin.sln'
      - 'build.bat'
      - 'build.ps1'
  workflow_dispatch:

jobs:
  msbuild:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set artifact name
        shell: bash
        run: |
          sha=$(echo ${{ github.sha }} | cut -c 1-8)
          echo "artifact_sha=$sha" >> $GITHUB_ENV

      - name: Check dependencies cache
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: |
            ./Thirdparty
            ./OverlayPlugin.Core/Thirdparty
          key: ${{ runner.os }}-overlayplugin-${{ hashFiles('./tools/fetch_deps.py', './DEPS.py') }}
          restore-keys: |
            ${{ runner.os }}-overlayplugin-
      # Fetch dependencies only if cache-hit is false
      - name: Set up Python 3.8
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Fetch dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          python .\tools\fetch_deps.py

      - name: Set up msbuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Add Custom Problem Matcher
        run: |
          echo "::add-matcher::.github/matchers/${{ github.job }}.json"

      - name: Run Build
        run: .\build.bat -ci
        shell: cmd
        
      - name: Determine Version
        shell: pwsh
        run: |
          $text = [System.IO.File]::ReadAllText("OverlayPlugin\Properties\AssemblyInfo.cs");
          $regex = [regex]::New('\[assembly: AssemblyVersion\("([0-9]+\.[0-9]+\.[0-9]+)\.[0-9]+"\)');
          $m = $regex.Match($text);
          if (-not $m) {
              echo "Error: Version number not found in the AssemblyInfo.cs!"
              exit 1
          }
          $version = $m.Groups[1]
          echo "version=$version" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      # Expected "OverlayPlugin" as top level item of .zip
      - name: Create Intermediate Directory
        shell: bash
        run: |
          cd out/Release
          mkdir tmp/
          mv OverlayPlugin/ tmp/
          mv tmp/ OverlayPlugin/         

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: OverlayPlugin-${{ env.version }}-${{ env.artifact_sha }}
          path: out/Release/OverlayPlugin/
          retention-days: 30
